// Prisma schema file (schema.prisma)

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Enums
enum UserRole {
  STUDENT
  TEACHER
  ADMIN
}

enum QuestionType {
  MULTIPLE_CHOICE
  MATCHING
  SHORT_RESPONSE
  IMAGE_UPLOAD
}

enum SenderType {
  USER
  AI
}

// User model
model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  phoneNumber    String?
  image          String?
  hashedPassword String?
  firstTime      Boolean   @default(true)

  role     UserRole  @default(STUDENT)
  accounts Account[]
  sessions Session[]

  // Content created by the user
  notes         Note[]
  flashcardSets FlashcardSet[]
  questions     Question[]
  quizzes       Quiz[]
  concepts      Concept[] // Concepts created by the user

  // AI interactions
  aiConversations AIConversation[]
  aiUsages        AIUsage[]

  // Messaging relations
  userConversations UserConversationParticipant[]
  userMessages      UserMessage[]
  messagesSeen      MessageSeenByUser[]

  // Other relations
  memoryItems MemoryItem[]
  mindMaps    MindMap[]

  // AI Credit Information
  totalCredit Float @default(10000.0)
  usedCredit  Float @default(0.0)

  // Timestamps
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Flashcard    Flashcard[]
  QuizResponse QuizResponse[]

  StripeCustomer StripeCustomer?
  Purchase       Purchase[]
  Invoice        Invoice[]
  Subscription   Subscription[]

  @@map("users")
}

// Account model
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// Session model
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

// Note model
model Note {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  title           String // Title of the note
  content         String // Original content of the note
  enhancedContent String? // AI-enhanced version with highlights, examples, etc.
  subject         String
  topic           String?
  isPublic        Boolean @default(false)
  createdByAI     Boolean @default(false) // Indicates if note is created by the chatbot, if so show a disclaimer

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  keyTerms   KeyTerm[] // Highlighted key terms within the note
  flashcards Flashcard[]
  mindMaps   MindMap[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Question  Question[]

  @@map("notes")
}

// KeyTerm model
model KeyTerm {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  noteId    String  @db.ObjectId
  note      Note    @relation(fields: [noteId], references: [id], onDelete: Cascade)
  conceptId String  @db.ObjectId
  concept   Concept @relation(fields: [conceptId], references: [id], onDelete: Cascade)
  position  Int? // Optional: Position in the note where the term is highlighted

  @@unique([noteId, conceptId])
  @@map("key_terms")
}

// Concept model
model Concept {
  id                  String  @id @default(auto()) @map("_id") @db.ObjectId
  term                String // The term or concept
  definition          String? // Brief definition or explanation (from web query)
  detailedExplanation String? // AI-generated mini-note (more detailed explanation)
  analogy             String? // Simplified explanation for a 3 year old

  // Hierarchical relations to form knowledge graphs
  parentId String?   @db.ObjectId
  parent   Concept?  @relation("ConceptHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children Concept[] @relation("ConceptHierarchy")

  createdById String @db.ObjectId
  createdBy   User   @relation(fields: [createdById], references: [id], onDelete: Cascade)

  keyTerms          KeyTerm[] // Occurrences of this concept in notes
  flashcardConcepts FlashcardConcept[]
  questionConcepts  QuestionConcept[]

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  QuizConcept QuizConcept[]

  @@map("concepts")
}

// Flashcard model
model Flashcard {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String // Title or topic of the flashcard
  front       String // Question or prompt side
  back        String // Answer or explanation side
  isPublic    Boolean @default(false)
  createdByAI Boolean @default(false) // Indicates if created by the chatbot, if so show disclaimer in the flashcard set

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  lastReviewedAt DateTime?

  flashcardSetId String?       @db.ObjectId
  flashcardSet   FlashcardSet? @relation(fields: [flashcardSetId], references: [id], onDelete: Cascade)

  noteId String? @db.ObjectId
  note   Note?   @relation(fields: [noteId], references: [id], onDelete: Cascade)

  createdById String @db.ObjectId
  createdBy   User   @relation(fields: [createdById], references: [id], onDelete: Cascade)

  flashcardConcepts FlashcardConcept[] // Concepts associated with this flashcard

  @@map("flashcards")
}

// FlashcardConcept model
model FlashcardConcept {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  flashcardId String    @db.ObjectId
  flashcard   Flashcard @relation(fields: [flashcardId], references: [id], onDelete: Cascade)
  conceptId   String    @db.ObjectId
  concept     Concept   @relation(fields: [conceptId], references: [id], onDelete: Cascade)

  @@unique([flashcardId, conceptId])
  @@map("flashcard_concepts")
}

// Question model
model Question {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  content        String // The question text
  type           QuestionType
  options        String[] // For MULTIPLE_CHOICE and MATCHING
  correctAnswers String[] // Correct answers
  explanation    String? // Explanation for the answer
  subject        String
  topic          String?
  createdByAI    Boolean      @default(false)

  createdById String @db.ObjectId
  createdBy   User   @relation(fields: [createdById], references: [id], onDelete: Cascade)

  noteId String? @db.ObjectId
  note   Note?   @relation(fields: [noteId], references: [id], onDelete: Cascade)

  quizItems QuizItem[]

  questionConcepts QuestionConcept[] // Concepts associated with this question

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("questions")
}

// QuestionConcept model
model QuestionConcept {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  questionId String   @db.ObjectId
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  conceptId  String   @db.ObjectId
  concept    Concept  @relation(fields: [conceptId], references: [id], onDelete: Cascade)

  @@unique([questionId, conceptId])
  @@map("question_concepts")
}

// FlashcardSet model
model FlashcardSet {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  title    String
  subject  String
  topic    String?
  isPublic Boolean @default(false)

  flashcards Flashcard[]

  createdById String @db.ObjectId
  createdBy   User   @relation(fields: [createdById], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("flashcard_sets")
}

// Quiz model
model Quiz {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  subject     String
  topic       String?
  isPublic    Boolean @default(false)
  isTestMode  Boolean @default(false) // If true, AI help is disabled and timer is enabled
  timeLimit   Int? // Time limit in minutes if test mode is enabled

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdById String @db.ObjectId
  createdBy   User   @relation(fields: [createdById], references: [id], onDelete: Cascade)

  quizItems     QuizItem[]
  quizResponses QuizResponse[]

  quizConcepts QuizConcept[] // Concepts associated with this quiz

  @@map("quizzes")
}

// QuizItem model
model QuizItem {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  quizId String @db.ObjectId
  quiz   Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)

  questionId String   @db.ObjectId
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  order Int // The order of the question in the quiz

  @@map("quiz_items")
}

// QuizResponse model
model QuizResponse {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  quizId String @db.ObjectId
  quiz   Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)

  responses Json // Stores user's answers to questions
  score     Float?
  timeTaken Int? // Time taken in seconds if test mode is enabled
  createdAt DateTime @default(now())

  @@map("quiz_responses")
}

// QuizConcept model
model QuizConcept {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  quizId    String  @db.ObjectId
  quiz      Quiz    @relation(fields: [quizId], references: [id], onDelete: Cascade)
  conceptId String  @db.ObjectId
  concept   Concept @relation(fields: [conceptId], references: [id], onDelete: Cascade)

  @@unique([quizId, conceptId])
  @@map("quiz_concepts")
}

// MindMap model
model MindMap {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  data  Json // JSON structure representing nodes and edges

  noteId String @db.ObjectId
  note   Note   @relation(fields: [noteId], references: [id], onDelete: Cascade)

  createdById String @db.ObjectId
  createdBy   User   @relation(fields: [createdById], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("mind_maps")
}

// MemoryItem model
model MemoryItem {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  content       String // Snapshot of the content
  type          String // e.g., "Flashcard", "Note", "Concept", "Question"
  referenceId   String   @db.ObjectId // ID of the original item
  referenceType String // Model type of the original item
  starredAt     DateTime @default(now())

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("memory_items")
}

// AIConversation model
model AIConversation {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  subject       String?
  contextOptOut Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  aiMessages AIMessage[]

  // Optional relations to associate the conversation with specific content
  contentType String? // e.g., "Note", "Flashcard", "Question"
  contentId   String? @db.ObjectId

  @@map("ai_conversations")
}

// AIMessage model
model AIMessage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String?
  createdAt DateTime @default(now())

  conversationId String         @db.ObjectId
  conversation   AIConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderType SenderType // USER or AI

  @@map("ai_messages")
}

// AIUsage model
model AIUsage {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  endpoint   String // API endpoint used
  tokensUsed Int // Number of tokens used
  cost       Float // Cost in credits
  timestamp  DateTime @default(now())

  @@map("ai_usages")
}

// User-to-User Messaging Models

// UserConversation model
model UserConversation {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  isGroup   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  participants UserConversationParticipant[]
  messages     UserMessage[]

  @@map("user_conversations")
}

// UserConversationParticipant model
model UserConversationParticipant {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  conversationId String           @db.ObjectId
  conversation   UserConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@unique([userId, conversationId])
  @@map("user_conversation_participants")
}

// UserMessage model
model UserMessage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String?
  image     String?
  createdAt DateTime @default(now())

  senderId String @db.ObjectId
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)

  conversationId String           @db.ObjectId
  conversation   UserConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  messageSeenByUsers MessageSeenByUser[]

  @@map("user_messages")
}

// MessageSeenByUser model
model MessageSeenByUser {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  messageId String      @db.ObjectId
  message   UserMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
  @@map("message_seen_by_users")
}

// VerificationToken model
model VerificationToken {
  id      String   @id @default(cuid()) @map("_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("verification_tokens")
}

// PasswordResetToken model
model PasswordResetToken {
  id      String   @id @default(cuid()) @map("_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("password_reset_tokens")
}

// Purchase model (for Stripe integration)
model Purchase {
  id        String   @id @default(uuid()) @map("_id")
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  credit    Float
  createdAt DateTime @default(now())

  @@map("purchases")
}

// StripeCustomer model
model StripeCustomer {
  id               String @id @default(uuid()) @map("_id")
  userId           String @unique @db.ObjectId
  stripeCustomerId String @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("stripe_customers")
}

model Plan {
  id            String         @id @default(cuid()) @map("_id") @db.ObjectId
  name          String
  price         Float
  stripePlanId  String         @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]
}

model Subscription {
  id                   String   @id @default(cuid()) @map("_id")
  userId               String   @db.ObjectId
  planId               String   @db.ObjectId
  stripeSubscriptionId String   @unique
  status               String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan                 Plan     @relation(fields: [planId], references: [id], onDelete: Cascade)
}

model Invoice {
  id              String   @id @default(cuid()) @map("_id")
  userId          String   @db.ObjectId
  stripeInvoiceId String   @unique
  amount          Float
  status          String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
